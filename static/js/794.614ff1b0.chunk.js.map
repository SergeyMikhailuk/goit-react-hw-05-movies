{"version":3,"file":"static/js/794.614ff1b0.chunk.js","mappings":"mMAGAA,EAAAA,EAAMC,SAASC,QAAU,+BAEzB,MAAMC,EAAS,CACbA,OAAQ,CACNC,QALY,mCAMZC,SAAU,UAIDC,EAAoBC,gBACbP,EAAAA,EAAMQ,IAAG,qBAAiDL,IACjEM,KAAKC,QAELC,EAAkBJ,gBACXP,EAAAA,EAAMQ,IAAG,uBAAAI,OAAkDC,GAAaV,IAC/EM,KAAKC,QAOLI,EAAkBP,gBACXP,EAAAA,EAAMQ,IAAG,UAAAI,OAA6BG,GAAWZ,IACxDM,KAaAO,EAAeT,gBACRP,EAAAA,EAAMQ,IAAG,SAAAI,OAAqCG,EAAO,aAAaZ,IACzEM,KAAKQ,KASLC,EAAkBX,gBACXP,EAAAA,EAAMQ,IAAG,SAAAI,OAA2CG,EAAO,aAAaZ,IAC/EM,KAAKC,O,sDCjDlB,MAaA,EAbmBS,IAAA,IAAC,OAAEC,EAAM,SAAEC,GAA0BF,EAAA,OACtDG,EAAAA,EAAAA,KAAA,MAAAC,WACW,OAANH,QAAM,IAANA,IAAAA,EAAQI,SACTJ,EAAOK,KAAIC,IACTJ,EAAAA,EAAAA,KAAA,MAAAC,UACED,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACC,GAAE,WAAAhB,OAAac,EAAMG,IAAMC,MAAO,CAAEC,KAAMV,GAAWE,SACxDG,EAAMM,SAFFN,EAAMG,OAMhB,C,gHCPP,MAmDA,EAnDmBI,KACjB,MAAOb,EAAQc,IAAaC,EAAAA,EAAAA,UAAsB,KAC3CC,EAAcC,IAAmBC,EAAAA,EAAAA,MAClCzB,EAAYuB,EAAa5B,IAAI,UAAY,GACzCa,GAAWkB,EAAAA,EAAAA,MAuBjB,OAhBAC,EAAAA,EAAAA,YAAU,KACR,IAAK3B,EAAW,OAECN,WACf,IACE,MAAMkC,QAAkB9B,EAAAA,EAAAA,IAAgBE,GACxC6B,QAAQC,IAAIF,GACZP,EAAUO,EACZ,CAAE,MAAOG,GACPF,QAAQG,MAAMD,EAChB,GAGFE,GAAWC,MAAM,GAChB,CAAClC,KAGFmC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA1B,SAAA,EACED,EAAAA,EAAAA,KAAC4B,EAAAA,GAAM,CACLC,cAAe,CAAEC,MAAOvC,GACxBwC,SAAUA,CAAAlC,EAAAmC,KAA8C,IAA7C,MAAEF,GAAOjC,GAAE,cAAEoC,EAAa,UAAEC,GAAWF,EAzB7BF,KAEzBf,EAD8B,KAAVe,EAAe,CAAEA,cAAUK,EACnB,EAwBtBC,CAAkBN,GAClBG,GAAc,GACdC,GAAW,EACXjC,SAEDoC,IAAA,IAAC,aAAEC,GAAcD,EAAA,OAChBX,EAAAA,EAAAA,MAACa,EAAAA,GAAI,CAAAtC,SAAA,EACHD,EAAAA,EAAAA,KAACwC,EAAAA,GAAK,CAACC,KAAK,OAAOC,KAAK,WACxB1C,EAAAA,EAAAA,KAAA,UAAQyC,KAAK,SAASE,SAAUL,EAAarC,SAAC,aAGzC,KAGXD,EAAAA,EAAAA,KAAC4C,EAAAA,EAAU,CAAC9C,OAAQA,EAAQC,SAAUA,MACrC,C","sources":["api/moviesAPI.ts","components/MoviesList/MoviesList.tsx","containers/pages/Movies/MoviesPage.tsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '782d86e0b2ff3bbb0b829582439018d5';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n};\n\nexport const getTrendingMovies = async () => {\n  const res = await axios.get<{ results: MovieType[] }>(`trending/movie/day`, params);\n  return res.data.results;\n};\nexport const getMoviesByName = async (movieName: string) => {\n  const res = await axios.get<{ results: MovieType[] }>(`/search/movie?query=${movieName}`, params);\n  return res.data.results;\n};\nexport type MovieType = {\n  id: number;\n  title: string;\n};\n\nexport const getMovieDetails = async (movieId: string) => {\n  const res = await axios.get<MovieDetailsType>(`/movie/${movieId}`, params);\n  return res.data;\n};\nexport type MovieDetailsType = {\n  genres: {\n    id: number;\n    name: string;\n  }[];\n  overview: string;\n  poster_path: string;\n  title: string;\n  vote_average: number;\n};\n\nexport const getMovieCast = async (movieId: string) => {\n  const res = await axios.get<{ cast: MovieCastType[] }>(`movie/${movieId}/credits?`, params);\n  return res.data.cast;\n};\nexport type MovieCastType = {\n  id: number;\n  name: string;\n  profile_path: string;\n  character: string;\n};\n\nexport const getMovieReviews = async (movieId: string) => {\n  const res = await axios.get<{ results: MovieReviewsType[] }>(`movie/${movieId}/reviews?`, params);\n  return res.data.results;\n};\nexport type MovieReviewsType = {\n  author: string;\n  content: string;\n  id: string;\n};\n","import { Link } from 'react-router-dom';\n\nimport { MovieType } from 'api/moviesAPI';\n\nconst MoviesList = ({ movies, location }: MoviesListType) => (\n  <ol>\n    {!!movies?.length &&\n      movies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            {movie.title}\n          </Link>\n        </li>\n      ))}\n  </ol>\n);\n\nexport default MoviesList;\n\ntype MoviesListType = {\n  movies: MovieType[];\n  location: any;\n};\n","import { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\n\nimport MoviesList from 'components/MoviesList';\nimport { getMoviesByName, MovieType } from 'api/moviesAPI';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState<MovieType[]>([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') || '';\n  const location = useLocation();\n\n  const updateQueryString = (query: string) => {\n    const queryParams = query !== '' ? { query } : undefined;\n    setSearchParams(queryParams);\n  };\n\n  useEffect(() => {\n    if (!movieName) return;\n\n    const getMovie = async () => {\n      try {\n        const moviesRes = await getMoviesByName(movieName);\n        console.log(moviesRes);\n        setMovies(moviesRes);\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n    getMovie().then();\n  }, [movieName]);\n\n  return (\n    <>\n      <Formik\n        initialValues={{ query: movieName }}\n        onSubmit={({ query }, { setSubmitting, resetForm }) => {\n          updateQueryString(query);\n          setSubmitting(false);\n          resetForm();\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <Field type=\"text\" name=\"query\" />\n            <button type=\"submit\" disabled={isSubmitting}>\n              Search\n            </button>\n          </Form>\n        )}\n      </Formik>\n      <MoviesList movies={movies} location={location} />\n    </>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["axios","defaults","baseURL","params","api_key","language","getTrendingMovies","async","get","data","results","getMoviesByName","concat","movieName","getMovieDetails","movieId","getMovieCast","cast","getMovieReviews","_ref","movies","location","_jsx","children","length","map","movie","Link","to","id","state","from","title","MoviesPage","setMovies","useState","searchParams","setSearchParams","useSearchParams","useLocation","useEffect","moviesRes","console","log","e","error","getMovie","then","_jsxs","_Fragment","Formik","initialValues","query","onSubmit","_ref2","setSubmitting","resetForm","undefined","updateQueryString","_ref3","isSubmitting","Form","Field","type","name","disabled","MoviesList"],"sourceRoot":""}