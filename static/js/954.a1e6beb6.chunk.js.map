{"version":3,"file":"static/js/954.a1e6beb6.chunk.js","mappings":"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","sources":["api/moviesAPI.ts","containers/pages/MovieDetails/MoviesDetailsPage.styled.ts","containers/pages/MovieDetails/MoviesDetailsPage.tsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '782d86e0b2ff3bbb0b829582439018d5';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n};\n\nexport const getTrendingMovies = async () => {\n  const res = await axios.get<{ results: MovieType[] }>(`trending/movie/day`, params);\n  return res.data.results;\n};\nexport const getMoviesByName = async (movieName: string) => {\n  const res = await axios.get<{ results: MovieType[] }>(`/search/movie?query=${movieName}`, params);\n  return res.data.results;\n};\nexport type MovieType = {\n  id: number;\n  title: string;\n};\n\nexport const getMovieDetails = async (movieId: string) => {\n  const res = await axios.get<MovieDetailsType>(`/movie/${movieId}`, params);\n  return res.data;\n};\nexport type MovieDetailsType = {\n  genres: {\n    id: number;\n    name: string;\n  }[];\n  overview: string;\n  poster_path: string;\n  title: string;\n  vote_average: number;\n};\n\nexport const getMovieCast = async (movieId: string) => {\n  const res = await axios.get<{ cast: MovieCastType[] }>(`movie/${movieId}/credits?`, params);\n  return res.data.cast;\n};\nexport type MovieCastType = {\n  id: number;\n  name: string;\n  profile_path: string;\n  character: string;\n};\n\nexport const getMovieReviews = async (movieId: string) => {\n  const res = await axios.get<{ results: MovieReviewsType[] }>(`movie/${movieId}/reviews?`, params);\n  return res.data.results;\n};\nexport type MovieReviewsType = {\n  author: string;\n  content: string;\n  id: string;\n};\n","import styled from '@emotion/styled';\nimport { Link as RouterLink } from 'react-router-dom';\n\nexport const MovieWrapper = styled.div`\n  display: flex;\n  gap: 16px;\n  padding: 10px;\n\n  border-bottom: solid 2px red;\n`;\n\nexport const Link = styled(RouterLink)`\n  display: flex;\n  width: fit-content;\n  margin: 5px;\n  padding: 4px;\n\n  color: black;\n  text-decoration: none;\n  border: solid 1px black;\n  border-radius: 4px;\n`;\n\nexport const AdditionalWrapper = styled.div`\n  padding: 10px;\n\n  border-bottom: solid 2px red;\n\n  & li:not(:last-of-type) {\n    margin-bottom: 8px;\n  }\n`;\n","import { Suspense, useEffect, useRef, useState } from 'react';\nimport { Link as DefaultLink, Outlet, useLocation, useParams } from 'react-router-dom';\n\nimport { getMovieDetails, MovieDetailsType } from 'api/moviesAPI';\nimport defaultImg from 'static/images/defaultIcon.png';\n\nimport { MovieWrapper, Link, AdditionalWrapper } from './MoviesDetailsPage.styled';\n\nconst MoviesDetailsPage = () => {\n  const [movieDetails, setMovieDetails] = useState<MovieDetailsType>();\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLink = useRef(location.state?.from || '/');\n\n  useEffect(() => {\n    if (movieDetails) return;\n\n    const getMovie = async () => {\n      try {\n        const movie = await getMovieDetails(movieId || '');\n\n        setMovieDetails(movie);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    getMovie().then();\n  }, [movieId, movieDetails]);\n\n  return (\n    <>\n      <Link to={backLink.current}>{'<- Go back'}</Link>\n      {movieDetails && (\n        <MovieWrapper>\n          <img\n            src={\n              movieDetails.poster_path\n                ? `https://image.tmdb.org/t/p/w500${movieDetails.poster_path}`\n                : `${defaultImg}`\n            }\n            alt={movieDetails.title}\n            width={300}\n          />\n          <div>\n            <h2>{movieDetails.title}</h2>\n            <p>{'User Score: ' + Math.round(movieDetails.vote_average * 10) + '%'}</p>\n\n            <h3>Overview</h3>\n            <p>{movieDetails.overview}</p>\n\n            <h3>Genres</h3>\n            {movieDetails.genres.map((genre, index) => (\n              <span key={genre.id}>\n                {genre.name}\n                <span>{index !== movieDetails.genres.length - 1 ? ', ' : ''}</span>\n              </span>\n            ))}\n          </div>\n        </MovieWrapper>\n      )}\n      <AdditionalWrapper>\n        <p>Additional information</p>\n        <ul>\n          <li>\n            <DefaultLink to={'cast'}>Cast</DefaultLink>\n          </li>\n          <li>\n            <DefaultLink to={'reviews'}>Reviews</DefaultLink>\n          </li>\n        </ul>\n      </AdditionalWrapper>\n      <Suspense fallback={<>Loading...</>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MoviesDetailsPage;\n"],"names":["axios","defaults","baseURL","params","api_key","language","getTrendingMovies","async","get","data","results","getMoviesByName","concat","movieName","getMovieDetails","movieId","getMovieCast","cast","getMovieReviews","MovieWrapper","styled","div","_templateObject","_taggedTemplateLiteral","Link","RouterLink","_templateObject2","AdditionalWrapper","_templateObject3","MoviesDetailsPage","_location$state","movieDetails","setMovieDetails","useState","useParams","location","useLocation","backLink","useRef","state","from","useEffect","movie","error","console","getMovie","then","_jsxs","_Fragment","children","_jsx","to","current","src","poster_path","defaultImg","alt","title","width","Math","round","vote_average","overview","genres","map","genre","index","name","length","id","DefaultLink","Suspense","fallback","Outlet"],"sourceRoot":""}